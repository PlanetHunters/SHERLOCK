import keras
from keras import Model


class AutoEncoder():
    def build(self):
        # (flux, centroidx, centroidy, motionx, motiony, bck)
        input_size = 20610
        input = keras.Input(shape=(20610, 6))
        self.enc_branch1 = keras.layers.SpatialDropout1D(rate=0.2)(input)
        self.enc_branch1_r = keras.layers.Conv1D(filters=5000, kernel_size=100, padding="same", activation="relu")(self.enc_branch1)
        self.enc_branch1 = keras.layers.MaxPooling1D(pool_size=50, strides=10, padding="same")(self.enc_branch1_r)
        self.enc_branch1 = keras.layers.Dropout(rate=0.1)(self.enc_branch1)
        self.enc_branch2_r = keras.layers.Conv1D(filters=1250, kernel_size=33, padding="same", activation="relu")(self.enc_branch1)
        self.enc_branch2 = keras.layers.MaxPooling1D(pool_size=20, strides=5, padding="same")(self.enc_branch2_r)
        self.enc_branch2 = keras.layers.Dropout(rate=0.1)(self.enc_branch2)
        self.enc_branch3_r = keras.layers.Conv1D(filters=420, kernel_size=15, padding="same", activation="relu")(self.enc_branch2)
        self.enc_branch3 = keras.layers.MaxPooling1D(pool_size=15, strides=5, padding="same")(self.enc_branch3_r)
        self.enc_branch3 = keras.layers.Dropout(rate=0.1)(self.enc_branch3)
        self.enc_branch4_r = keras.layers.Conv1D(filters=128, kernel_size=9, padding="same", activation="relu")(self.enc_branch3)
        self.enc_branch4 = keras.layers.MaxPooling1D(pool_size=10, strides=2, padding="same")(self.enc_branch4_r)
        self.enc_branch4 = keras.layers.Dropout(rate=0.1)(self.enc_branch4)
        self.enc_branch5_r = keras.layers.Conv1D(filters=64, kernel_size=7, padding="same", activation="relu")(self.enc_branch4)
        self.enc_branch5 = keras.layers.MaxPooling1D(pool_size=4, strides=2, padding="same")(self.enc_branch5_r)
        self.enc_branch5 = keras.layers.Dropout(rate=0.1)(self.enc_branch5)
        self.enc_branch6_r = keras.layers.Conv1D(filters=32, kernel_size=5, padding="same", activation="relu")(self.enc_branch5)
        self.enc_branch6 = keras.layers.MaxPooling1D(pool_size=3, strides=1, padding="same")(self.enc_branch6_r)
        self.enc_branch6 = keras.layers.Dropout(rate=0.1)(self.enc_branch6)
        self.enc_branch7_r = keras.layers.Conv1D(filters=16, kernel_size=3, padding="same", activation="relu")(self.enc_branch6)
        self.enc_branch7 = keras.layers.MaxPooling1D(pool_size=2, strides=1, padding="same")(self.enc_branch7_r)
        self.enc_branch7 = keras.layers.Dropout(rate=0.1)(self.enc_branch7)
        self.dec_branch7 = keras.layers.UpSampling1D(1)(self.enc_branch7)
        self.dec_branch7 = keras.layers.Conv1DTranspose(filters=16, kernel_size=3, padding="same")(self.enc_branch7)
        self.dec_branch6 = keras.layers.UpSampling1D(1)(self.dec_branch7)
        self.dec_branch6 = keras.layers.Conv1DTranspose(filters=32, kernel_size=5, padding="same")(self.dec_branch6)
        self.dec_branch6 = keras.layers.Add()([self.enc_branch6_r, self.dec_branch6])
        self.dec_branch5 = keras.layers.UpSampling1D(2)(self.dec_branch6)
        self.dec_branch5 = keras.layers.Conv1DTranspose(filters=64, kernel_size=7, padding="same")(self.dec_branch5)
        self.dec_branch5 = keras.layers.Add()([self.enc_branch5_r, self.dec_branch5])
        self.dec_branch4 = keras.layers.UpSampling1D(2)(self.dec_branch5)
        self.dec_branch4 = keras.layers.Cropping1D(cropping=(0, 1))(self.dec_branch4)
        self.dec_branch4 = keras.layers.Conv1DTranspose(filters=128, kernel_size=9, padding="same")(self.dec_branch4)
        self.dec_branch4 = keras.layers.Add()([self.enc_branch4_r, self.dec_branch4])
        self.dec_branch3 = keras.layers.UpSampling1D(5)(self.dec_branch4)
        self.dec_branch3 = keras.layers.Cropping1D(cropping=1)(self.dec_branch3)
        self.dec_branch3 = keras.layers.Conv1DTranspose(filters=420, kernel_size=15, padding="same")(self.dec_branch3)
        self.dec_branch3 = keras.layers.Add()([self.enc_branch3_r, self.dec_branch3])
        self.dec_branch2 = keras.layers.UpSampling1D(5)(self.dec_branch3)
        self.dec_branch2 = keras.layers.Cropping1D(cropping=2)(self.dec_branch2)
        self.dec_branch2 = keras.layers.Conv1DTranspose(filters=1250, kernel_size=33, padding="same")(self.dec_branch2)
        self.dec_branch2 = keras.layers.Add()([self.enc_branch2_r, self.dec_branch2])
        self.dec_branch1 = keras.layers.UpSampling1D(10)(self.dec_branch2)
        self.dec_branch1 = keras.layers.Conv1DTranspose(filters=5000, kernel_size=100, padding="same")(self.dec_branch2)
        self.dec_branch1 = keras.layers.Add()([self.enc_branch1_r, self.dec_branch1])
        self.linear_proj = keras.layers.GlobalAveragePooling1D()(self.dec_branch1)
        self.linear_proj = keras.layers.Dense(input_size)(self.linear_proj, activation="relu")
        self.linear_proj = keras.layers.Dropout(rate=0.1)(self.linear_proj)
        self.linear_proj = keras.layers.Dense(input_size)(self.linear_proj, activation="softmax")
        model = Model(inputs=input, outputs=self.linear_proj)
        keras.utils.vis_utils.plot_model(model, "detrend_autoencoder_resnet.png", show_shapes=True)

AutoEncoder().build()



